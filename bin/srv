#!/bin/bash

# Configuration
HOST=localhost
PORT=4000

# Stop on errors
set -Eeuo pipefail

# Parse arguments
if [ "$#" -gt 1 ]; then
  echo "Usage: $0 [DIR]"
  exit 1
elif [ "$#" -eq 1 ]; then
  DIR="$1"
fi

# Change directory
if [ -n "${DIR-}" ]; then
  if [ ! -d "$DIR" ]; then
    echo "Error: directory does not exist: ${DIR}"
    exit 1
  fi
  echo "cd $DIR"
  cd "$DIR"
fi

# Check if port is already in use
if nc -z $HOST $PORT &> /dev/null; then
  echo "Error: ${HOST}:${PORT} is in use"
  exit 1
fi

# Intelligently choose the right server
if [ -e _config.yml ] && grep -q '^plugins' _config.yml; then
  # Jekyll with primer-spec remote theme
  SERVERCMD="bundle exec jekyll serve --host $HOST --port $PORT"
elif [ -e _config.yml ]; then
  # Jekyll
  SERVERCMD="jekyll serve --host $HOST --port $PORT"
elif [ -e README.md ]; then
  # Markdown README
  SERVERCMD="grip ${HOST}:${PORT}"
else
  # Default to HTTP file server
  SERVERCMD="python3 -m http.server --bind $HOST $PORT"
fi

# Register handler to kill server on exit
function cleanup() {
  kill $PID || echo "Error killing process $PID"
}
trap cleanup SIGINT SIGQUIT SIGABRT SIGKILL SIGTERM ERR

# Start server
echo $SERVERCMD
$SERVERCMD & PID=$!

# Wait for server to start with a timeout
for i in  `seq 10` ; do
  if curl "${HOST}:${PORT}" --silent --output /dev/null; then
    break
  fi
  if ! kill -0 $PID &> /dev/null; then
    echo "Error: server process is not running"
    cleanup
    exit 1
  fi
  sleep 0.5
done
if ! curl "${HOST}:${PORT}" --silent --output /dev/null; then
  echo "Error: ${HOST}:${PORT} is not responding to HTTP requests"
  echo "+ curl ${HOST}:${PORT} --verbose --output /dev/null"
  cleanup
  exit 1
fi

# Open browser tab
open "http://${HOST}:${PORT}"

# Wait for all processes to exit
wait
