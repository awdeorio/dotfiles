#!/bin/bash
#
# inve
#
# Activate a virtual environment in a subshell.
#
# Search up for common virtual environment names.  Activate in a subshell when
# one is found.  Otherwise, offer to create one.
#
# Andrew DeOrio <awdeorio@umich.edu>

# Virtual environment search path, basenames only, space separated
VENVPATH=".venv venv env"

# Stop on errors
set -Eeuo pipefail

# Help
if [ "${1-}" == "-h" ]; then
   echo "Usage: $0 [VIRTUAL_ENV]"
   echo ""
   echo "Activate a virtual environment in a subshell."
   echo
   echo "EXAMPLES:"
   echo "  inve        Search up for virtual env then activate or create"
   echo "  inve VENV   Activate or create virtual env VENV"
   exit
fi

# Parse virtual env specified as an arg
if [ -n "${1-}" ]; then
  VIRTUAL_ENV="$1"
fi

# If no virtual env was provided as an arg, search up the directory tree
if [ -z "${VIRTUAL_ENV-}" ]; then
  DIR=$(pwd)
  while true; do
    for V in ${VENVPATH}; do
      TEST_VIRTUAL_ENV="${DIR%/}/${V%/}"
      if [ -e "${TEST_VIRTUAL_ENV}/bin/activate" ]; then
        VIRTUAL_ENV="$TEST_VIRTUAL_ENV"
        break 2
      fi
    done

    # Stop at the root
    if [ "$DIR" == "/" ]; then
      break
    fi

    # Move up one directory
    DIR=$(dirname "$DIR")
  done
fi

# No virtual env provided as arg and not found
if [ -z "${VIRTUAL_ENV-}" ]; then
  VIRTUAL_ENV="$(pwd)/.venv"
fi

# Virtual environment not found, offer to create one
if ! test -d "${VIRTUAL_ENV}"; then
  BASENAME=$(basename "$VIRTUAL_ENV")
  read -p "Virtual environment not found.  Create ${BASENAME} ? [yn]: " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "python3 -m venv ${VIRTUAL_ENV}"
    python3 -m venv "${VIRTUAL_ENV}"
    echo "pip install --upgrade --quiet pip setuptools wheel"
    "${VIRTUAL_ENV}/bin/pip" install --upgrade --quiet pip setuptools wheel
  else
    echo "exit"
    exit 1
  fi
fi

# Verify virtual environment exists
if ! test -d "${VIRTUAL_ENV}/bin"; then
  echo "Error: directory does not exist: ${VIRTUAL_ENV}/bin"
  exit 1
fi

# Write a tmp bashrc file
# FIXME get a safe filename
TMPFILE=/tmp/inve-bashrc
rm -f $TMPFILE
touch $TMPFILE

# Mimic bash interactive shell
if test -f ~/.bashrc; then
  echo "source ~/.bashrc" >> $TMPFILE
fi

# Activate virtual environment
VIRTUAL_ENV=$(realpath "$VIRTUAL_ENV")
echo "export VIRTUAL_ENV=\"${VIRTUAL_ENV}\""
echo "export PATH=\"${VIRTUAL_ENV}/bin:\${PATH}\""
echo "export VIRTUAL_ENV=\"${VIRTUAL_ENV}\"" >> $TMPFILE
echo "export PATH=\"${VIRTUAL_ENV}/bin:\${PATH}\"" >> $TMPFILE

# Load .env file if there is one
# set -a causes defined variables to be exported
ENV_PATH="${VIRTUAL_ENV}/.env"
if test -f "${VIRTUAL_ENV}"; then
  echo "source ${VIRTUAL_ENV}/.env"
  echo "set -a" >> $TMPFILE
  echo "source ${VIRTUAL_ENV}/.env" >> $TMPFILE
  echo "set +a" >> $TMPFILE
fi

# Start a subshell initialized with the tmp bashrc we just wrote
# https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html
exec bash --rcfile $TMPFILE
